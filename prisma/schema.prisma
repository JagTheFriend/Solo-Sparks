// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  personalityProfile PersonalityProfile?
  userQuests         UserQuest[]
  sparkPoints        SparkPoints[]
  userRewards        UserReward[]
  moodEntries        MoodEntry[]

  @@map("users")
}

model PersonalityProfile {
  id             String   @id @default(cuid())
  userId         String   @unique
  traits         Json // Store personality traits as JSON
  emotionalNeeds Json // Store emotional needs as JSON
  preferences    Json // Store user preferences as JSON
  assessmentDate DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("personality_profiles")
}

model Quest {
  id           String @id @default(cuid())
  title        String
  description  String
  category     String
  difficulty   Int    @default(1) // 1-5 scale
  points       Int    @default(10)
  requirements Json // Store requirements as JSON
  isActive     Boolean @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  userQuests UserQuest[]

  @@map("quests")
}

model UserQuest {
  id          String      @id @default(cuid())
  userId      String
  questId     String
  status      QuestStatus @default(ASSIGNED)
  assignedAt  DateTime    @default(now())
  completedAt DateTime?
  reflection  String?

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  quest       Quest        @relation(fields: [questId], references: [id], onDelete: Cascade)
  reflections Reflection[]

  @@unique([userId, questId])
  @@map("user_quests")
}

model Reflection {
  id           String         @id @default(cuid())
  userQuestId  String
  type         ReflectionType
  content      String // For text reflections or file URLs
  metadata     Json? // Additional metadata like file size, duration, etc.
  createdAt    DateTime       @default(now())

  // Relations
  userQuest UserQuest @relation(fields: [userQuestId], references: [id], onDelete: Cascade)

  @@map("reflections")
}

model SparkPoints {
  id        String   @id @default(cuid())
  userId    String
  points    Int
  source    String // e.g., "quest_completion", "daily_login", "reflection_bonus"
  questId   String?
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("spark_points")
}

model Reward {
  id          String @id @default(cuid())
  name        String
  description String
  cost        Int // Points required to redeem
  type        String // "profile_boost", "hidden_content", "exclusive_prompt"
  metadata    Json? // Additional reward data
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userRewards UserReward[]

  @@map("rewards")
}

model UserReward {
  id         String   @id @default(cuid())
  userId     String
  rewardId   String
  redeemedAt DateTime @default(now())
  isUsed     Boolean  @default(false)
  usedAt     DateTime?

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  reward Reward @relation(fields: [rewardId], references: [id], onDelete: Cascade)

  @@map("user_rewards")
}

model MoodEntry {
  id        String   @id @default(cuid())
  userId    String
  mood      Int // 1-10 scale
  energy    Int // 1-10 scale
  stress    Int // 1-10 scale
  notes     String?
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("mood_entries")
}

enum QuestStatus {
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

enum ReflectionType {
  TEXT
  PHOTO
  AUDIO
}
